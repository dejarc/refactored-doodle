version: 2.1
commands:
  destroy_environment:
    description: "A simple command to destroy infrastructure"
    parameters:
      stack_name:
        type: string
        default: "circleci-stack"
      when_to_run:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy Environments
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack_name >>
          when: on_fail
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run : |
          aws cloudformation deploy --stack-name circleci-stack --template-file template.yml
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          yum install -y tar
          yum install -y gzip
      - run : |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name "a${CIRCLE_WORKFLOW_ID:0:7}" \
          --parameter-overrides NAME="a${CIRCLE_WORKFLOW_ID:0:7}"
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          yum install -y tar
          yum install -y gzip
      - run : |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text >> ~/pipeline-id.txt
      - run: |
          cat ~/pipeline-id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - pipeline-id.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          yum install -y tar
          yum install -y gzip
      - run : |
          aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          yum install -y tar
          yum install -y gzip
      - attach_workspace:
          at: ~/
      - run: |
          OLD_PIPELINE_ID=$(<~/pipeline-id.txt)
          echo $OLD_PIPELINE_ID
      - run : |
          aws s3 rm "s3://${OLD_PIPELINE_ID}" --recursive
          aws cloudformation delete-stack --stack-name "${OLD_PIPELINE_ID}"
  smoke_test_infrastructure_fail:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run : |
          aws cloudformation deploy --stack-name circleci-stack --template-file template.yml
      - run: return 1
      - destroy_environment:
          stack_name: circleci-stack
          when_to_run: on_fail

  configure_server_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["89:9d:db:4b:36:ff:29:00:5d:87:7c:2a:bd:33:93:0c"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook main-remote.yml -i inventory

  smoke_test_curl:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Check if website exists
          command: |
            if curl -s --head "https://google4.com"
            then
              echo "It worked!"
            else
              echo "It failed"
            fi

workflows:
  workflow:
    jobs:
      - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - promote_to_production
